
* Documentation
:PROPERTIES:
:TOC: :include all :ignore this
:END:

:CONTENTS:
- [[#the-array-object][The Array Object]]
- [[#array-types][Array Types]]
- [[#customizing-the-behavior-of-dense-array][Customizing the behavior of dense-array]]
- [[#references-and-internal-discussion][References and Internal Discussion]]
  - [[#types-vs-classes][Types vs Classes]]
:END:


* The Array Object

The =dense-arrays::dense-array= object is essentially a wrapper around a 1-dimensional vector. Depending on the =offsets=, =strides= and =dimensions= this 1-dimensional vector may be interpreted in different ways. For instance, below, notice how the =displaced-to= is the same:

#+BEGIN_SRC lisp
DENSE-ARRAYS> (make-array '(2 3) :constructor #'+)
#<STANDARD-DENSE-ARRAY 2x3 T
   (0 1 2)
   (1 2 3)
 {100330F653}>
DENSE-ARRAYS> (describe *)
#<STANDARD-DENSE-ARRAY 2x3 T  {100330F653}>
  [standard-object]

Slots with :INSTANCE allocation:
  STORAGE                        = #(0 1 2 1 2 3)
  DIMENSIONS                     = (2 3)
  ELEMENT-TYPE                   = T
  RANK                           = 2
  TOTAL-SIZE                     = 6
  STRIDES                        = (3 1)
  OFFSETS                        = (0 0)
  CONTIGUOUS-P                   = T
  ROOT-ARRAY                     = NIL
; No value
DENSE-ARRAYS> (aref (make-array '(2 3) :constructor #'+) 1)
#<STANDARD-DENSE-ARRAY (VIEW) 3 T
   1 2 3
 {10033B1543}>
DENSE-ARRAYS> (aref (make-array '(2 3) :constructor #'+) nil 1)
#<STANDARD-DENSE-ARRAY (VIEW) 2 T
   1 2
 {10033B23E3}>
DENSE-ARRAYS> (describe *)
#<STANDARD-DENSE-ARRAY (VIEW) 2 T  {10033B23E3}>
  [standard-object]

Slots with :INSTANCE allocation:
  STORAGE                        = #(0 1 2 1 2 3)
  DIMENSIONS                     = (2)
  ELEMENT-TYPE                   = T
  RANK                           = 1
  TOTAL-SIZE                     = 2
  STRIDES                        = (3)
  OFFSETS                        = (1)
  CONTIGUOUS-P                   = NIL
  ROOT-ARRAY                     = #<STANDARD-DENSE-ARRAY 2x3 T  {10033B2183}>
; No value
#+END_SRC

* Array Types

This object is to be used through the following types provided for optimization purposes.

- =(dense-arrays:array &optional element-type rank)=
- =(dense-arrays:simple-array &optional element-type rank)=
- =(dense-arrays:cl-array &optional element-type rank)= (TODO)

* Customizing the behavior of dense-array

Examples of customization are provided in [[plus/static-vectors.lisp]], [[plus/cl-cuda.lisp]], and [[file:plus/magicl.lisp][plus/magicl.lisp]]. The actual protocol rests in [[src/protocol.lisp]].

1. Thus, the first task is to subclass =dense-array-class= (or some other metaclass such as =standard-dense-array-class=, =static-dense-array-class=, =cuda-dense-array-class=). This creates a metaclass, let's call it =my-dense-array-class=.
2. Then, create a class with =my-dense-array-class= as the metaclass and =dense-array= as the superclass.
3. Specialize one or more of the generic functions to customize the behavior
   - =storage-allocator=
   - =storage-deallocator=
   - =storage-element-type-upgrader=
   - =storage-accessor=
   - =storage-type-inferrer-from-array-type=


* References and Internal Discussion

** Types vs Classes

1. https://stackoverflow.com/a/39665334/8957330
2. https://www.cs.princeton.edu/courses/archive/fall98/cs441/mainus/node12.html
3. https://www.cs.utexas.edu/users/wcook/papers/InheritanceSubtyping90/CookPOPL90.pdf
