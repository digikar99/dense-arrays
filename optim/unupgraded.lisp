(in-package :dense-arrays)

(in-suite unupgraded-array)

(def-test unupgraded-array/aref-compiler-macro ()
  (if (member :extensible-compound-types cl:*features*)
      (5am:skip "EXTENSIBLE-COMPOUND-TYPES is type unsafe for (> SPEED SAFETY)")
      (progn
        (with-output-to-string (*error-output*)
          (handler-bind ((warning #'muffle-warning))
            (eval `(let ((*dense-array-class* 'unupgraded-dense-array))
                     (let ((a (let ((a (make-array 2 :initial-element "" :element-type 'string)))
                                (funcall #'(setf aref) 0 (array-storage a) 0)
                                (funcall #'(setf aref) 0 (array-storage a) 1)
                                a)))
                       (declare (optimize speed)
                                (type (simple-unupgraded-array string 1) a))
                       (signals error (aref a 0))
                       (signals error (funcall #'(setf aref) 1 a 0))
                       (signals error (row-major-aref a 0))
                       (signals error (funcall #'(setf row-major-aref) 1 a 0)))))))
        (eval `(let ((*dense-array-class* 'standard-dense-array))
                 (let ((a (make-array 2 :initial-element 0 :element-type 'string)))
                   (declare (optimize speed)
                            ;; This does not even let (array string 1) declaration pass!
                            ;; And that's good because it avoids misdirecting users (?)
                            (type (array t 1) a))
                   (is-true (aref a 0))))))))
